#!/bin/bash
#
# Refresh the data for the Piccy supybot plugin.
#
#   Downloads updated PCI-Ids and kernel .debs, see README for details.
#
###
# Copyright (c) 2009 Stuart Prescott
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#   * Redistributions of source code must retain the above copyright notice,
#     this list of conditions, and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions, and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   * Neither the name of the author of this software nor the name of
#     contributors to this software may be used to endorse or promote products
#     derived from this software without specific prior written consent.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
###

set -u
set -e
# set -x

CLEANUP=${CLEANUP:-true}
VERBOSE=${VERBOSE:-false}
DEBUG=${DEBUG:-false}
if $DEBUG; then
  set -x
fi

PCIIDURL="http://pciids.sourceforge.net/v2.2/pci.ids"
PCIIDFILE="pci.ids"

WIKIMAPURL="http://wiki.debian.org/DeviceDatabase/ModuleToWikipageMap?action=raw"
WIKIMAPFILE="modules.wikilinks"

# Note that if the architecture being targeted by the script is changed,
# KERNERLRE will need changing too.
ARCH="i386"
# match various kernel versions and changes including:
# lenny/squeeze:                 linux-image-2.6.32-5-686
# squeeze trunk:                 linux-image-2.6.32-trunk-686
# backports:                     linux-image-2.6.38-bpo.2-686
# wheezy PAE (replaces -686):    linux-image-2.6.39-1-686-pae
# wheezy 3.0:                    linux-image-3.2.0-1-686-pae
KERNELRE='linux-image-~(2\.6\.[0-9]+~|[3-5]\.[0-9]+~(\.[0-9]+~)?~)+-~(.*bpo.~)?~(rc[0-9]~|trunk~|[0-9]+~)-686~(-pae~)?$'
# ARCH="amd64"
# KERNELRE='linux-image-2.6.[0-9]+-[0-9]-amd64$'

usage() {
  PROG=$(basename "$0")
  cat <<EOF

Usage: $PROG [kernels.list] [data_directory]

If kernels.list is not specified, a file in the cwd or in the same location
as the script itself will be used.

If data_directory is not specified, cwd will be used if there is existing data
in that directory already (e.g. pci.ids file and a versions file).

Format of kernels.list file should be:
    distname,    deb url release sections,     packageregexp,     options
where:
  distname      is 'sid' 'lenny' etc
  deb url ...   is one or more valid lines for an apt source.list (multiple
                lines are separated by a # character.
  packageregexp is an aptitude search pattern that will match the desired
                kernel. Default is '$KERNELRE'
  options       is a space-separated list of options to control what is updated
                from this source. Valid options are: xorg.
EOF
  exit 1
}

debug() {
  if $VERBOSE
  then
    echo "$@"
  fi
}

cleanup() {
  if $CLEANUP
  then
    debug 'I: cleaning up.'
    /bin/rm -rf "$TEMPDIR"
  fi
}

checktarget() {
  if [ -f "pci.ids" -a -f "versions" ]
  then
    TARGET="."
  else
    echo "E: Cowardly refusing to dump data in pristine cwd"
    usage
  fi
}

checkklist() {
  if [ -f "kernels.list" ]
  then
    KLIST="kernels.list"
    return
  else
    LOC=$(dirname "$0")
    if [ -f "$LOC/kernels.list" ]
    then
      KLIST="$LOC/kernels.list"
      return
    fi
  fi
  echo "E: Couldn't find kernels.list file in default locations."
  usage
}

updatekernel() {
  # Find the latest version of the kernel that matches the regexp
  # (latest version of the kernel will be sorted to the end)
  KERNEL=$(aptitude "${APTARGS[@]}" search ~n"$MATCH" -F'%p' -Oversion | tail -1)

  if [ -z "$KERNEL" ]
  then
    echo "E: No package matching '$MATCH' could not be found for release $NAME"
    return
  fi

  debug "I: Found kernel package '$MATCH'."

  # Work out what actual filename of the kernel package will be and the
  # version string of the kernel
  PKGVER=$(apt-cache "${APTARGS[@]}" policy $KERNEL | sed -n "s,.*Candidate:\s*,,p")
  KERNELDEB=$(apt-cache "${APTARGS[@]}" show $KERNEL | sed -n "s,Filename:\s*.*/\([^/]*_${PKGVER}_${ARCH}\),\1,p")
  VER=$(echo $KERNEL | sed "s,linux-image-\(.*\),\1,")

  OLDVER=$(awk "{FS=\", \"} /^\s*$NAME\s*,/ { print \$2 }" "$TARGET/versions")
  if [ -f "$TARGET/modules.pcimap-$NAME" -a -f "$TARGET/config-$NAME" ]
  then
    if [ -n "$OLDVER" ] && dpkg --compare-versions "$PKGVER" le-nl "$OLDVER"
    then
      debug "I: Using cached data for kernel version for release '$NAME'."
      return
    fi
  fi

  debug "I: Downloading kernel version $PKGVER ($KERNELDEB)."

  (cd "$WD" && aptitude "${APTARGS[@]}" download $KERNEL > /dev/null)

  # Because aptitude download is run in a subshell, its failure won't
  # cause the entire script to die. Note the failure and keep going.
  if [ ! -f "$WD/$KERNELDEB" ]
  then
    echo "E: Package '$KERNEL' could not be found for release $NAME"
    return
  fi

  debug "I: Unpacking kernel package."
  # Unpack the kernel package and create the modules map
  dpkg -x "$WD/$KERNELDEB" "$WD"
  # If this is running on a squeeze or later machine, -m is also needed for depmod
  # (since this is running under "set -e", make sure the command never has a
  # non-zero exit status)
  #DEPMODARGS=$(dpkg --compare-versions $(/sbin/depmod -V | cut -f2 -d\ ) gt 3.6 && echo -m || echo)
  /sbin/depmod -m -b "$WD" "$VER"

  # Copy out the map file and kernel config
  #cp "$WD"/lib/modules/*/modules.pcimap "$TARGET/modules.pcimap-$NAME"
  cp "$WD"/boot/config-* "$TARGET/config-$NAME"

  # Record the versions of the kernels that have been obtained in the
  # file "versions". Create this file first if it doesn't exist.
  if [ ! -f "$TARGET/versions" ]
  then
    cat <<EOF >"$TARGET/versions"
# List of kernel versions found in the archive
# Format:
#   release,  package version,  uname -r
EOF
  fi

  # If it's a new kernel, add it to the list, otherwise edit the current entry
  if grep -q "^\s*$NAME\s*," "$TARGET/versions"
  then
    sed -i "s/^\s*$NAME\s*,.*/$NAME, $PKGVER, $VER/" "$TARGET/versions"
  else
    echo "$NAME, $PKGVER, $VER" >> "$TARGET/versions"
  fi
}

updatexorg() {
  if [[ $OPTS != *xorg* ]]
  then
    debug "I: Skipping xorg driver packages as directed."
    return
  fi

  debug "I: Looking for xorg drivers."

  mkdir -p "$TARGET/xorg-$NAME"

  (cd "$WD" && aptitude "${APTARGS[@]}" download '~nxserver-xorg-video-*!~n-dbg!~v' -F"%p" > /dev/null)

  debug "I: Unpacking video drivers."
  for i in "$WD"/*.deb
  do
    dpkg -x "$i" "$WD"
  done

  if (shopt -s nullglob dotglob; f=("$WD"/usr/share/xserver-xorg/pci/*.ids); ((! ${#f[@]})))
  then
    echo "I: No xorg modules found for release '$NAME'."
  else
    cp "$WD"/usr/share/xserver-xorg/pci/*.ids "$TARGET/xorg-$NAME/"
  fi
}

if [ $# -eq 2 ]
then
  KLIST="$1"
  TARGET="$2"
elif [ $# -gt 2 ]
then
  echo "E: Unknown options $@"
  usage
elif [ $# -eq 1 ]
then
  if [ -f "$1" ]    # if it's a file, then it's the kernels.list
  then
    KLIST="$1"
    checktarget
  elif [ -d "$1" ]
  then
    TARGET="$1"
    checkklist
  else
    echo "E: couldn't figure out what to do with argument: $1"
    usage
  fi
else # 0 args
  checktarget
  checkklist
fi

if [ ! -d "$TARGET" ]
then
  echo "E: Target directory doesn't exist."
  echo "E: Please create '$TARGET'"
  usage
fi

if [ ! -f "$KLIST" ]
then
  echo "E: Couldn't find kernels.list file in specified location."
  usage
fi

TEMPDIR=$(mktemp -t -d piccy_update.XXXXXX)
debug "I: Working in temporary directory '$TEMPDIR'."

trap "cleanup; exit 1" INT QUIT

# Fetch the PCI-Ids
debug "I: Fetching latest pci.ids file."
wget -q -O "$TEMPDIR/pci.ids" "$PCIIDURL"
mv "$TEMPDIR/pci.ids" "$TARGET/$PCIIDFILE"

# Fetch the wikimap if defined
if [ -n "$WIKIMAPURL" ]
then
  debug "I: Fetching latest wikimap file."
  wget -q -U Supybot -O "$TEMPDIR/wikimap" "$WIKIMAPURL"
  mv "$TEMPDIR/wikimap" "$TARGET/$WIKIMAPFILE"
fi

# Make short replacement for /usr/bin/gpgv to suppress apt's warnings
# about keys for these repositories. The text of this was generated
# by looking at the dialogue between apt-get update and gpgv by running
# (as root):
#     /usr/bin/gpgv --status-fd 1 --ignore-time-conflict \
#      --keyring /etc/apt/trusted.gpg \
#     $WD/var/lib/apt/lists/ftp.uk.debian.org_debian_dists_sid_Release.gpg \
#     $WD/var/lib/apt/lists/ftp.uk.debian.org_debian_dists_sid_Release
echo \
'#!/bin/sh
FD=${3-1}
cat <<EOF 1>&$FD
gpgv: Signature made Tue 24 Jan 2012 08:19:25 GMT using RSA key ID 473041FA
[GNUPG:] SIG_ID O5oiBbMhfXaCP231qHusrN+et5s 2012-01-24 1327393165
[GNUPG:] GOODSIG AED4B06F473041FA Debian Archive Automatic Signing Key (6.0/squeeze) <ftpmaster@debian.org>
gpgv: Good signature from "Debian Archive Automatic Signing Key (6.0/squeeze) <ftpmaster@debian.org>"
[GNUPG:] VALIDSIG 9FED2BCBDCD29CDF762678CBAED4B06F473041FA 2012-01-24 1327393165 0 4 0 1 2 00 9FED2BCBDCD29CDF762678CBAED4B06F473041FA
EOF
' > "$TEMPDIR/fakegpgv"
chmod +x "$TEMPDIR/fakegpgv"


grep -v '^#' $KLIST |
while read line    # read from kernels.list config file
do
  echo "========================================================================"
  #echo $line
  NAME=$( echo "$line" | awk -F, '{print $1}' | awk '{$1=$1;print}')
  SRC=$(  echo "$line" | awk -F, '{print $2}' | awk '{$1=$1;print}')
  MATCH=$(echo "$line" | awk -F, '{print $3}' | awk '{$1=$1;print}')
  OPTS=$( echo "$line" | awk -F, '{print $4}' | awk '{$1=$1;print}')

  MATCH=${MATCH:-$KERNELRE}

  echo "Release: '$NAME' from '$SRC'"
  echo "Kernel pattern: '$MATCH'"

  # Separate the working directory for each of the releases
  WD="$TEMPDIR/$NAME"

  # Create some of the directories that will be required so that apt
  # doesn't complain
  for d in /etc/apt/apt.conf.d \
           /etc/apt/preferences.d \
           /etc/apt/trusted.gpg.d \
           /var/lib/apt/lists/partial \
           /var/cache/apt/archives/partial \
           /var/lib/dpkg/
  do
    mkdir -p "$WD$d"
  done
  touch "$WD/var/lib/dpkg/status"
  touch "$WD/etc/apt/trusted.gpg"

  APTARGS=(-o "quiet=1000"
           -o "Debug::NoLocking=true"
           -o "Dir::State=$WD/var/lib/apt"
           -o "Dir::State::status=$WD/var/lib/dpkg/status"
           -o "Dir=$WD"
           -o "APT::Architecture=$ARCH"
           -o "APT::Get::AllowUnauthenticated=true"
           -o "Dir::Bin::gpg=$TEMPDIR/fakegpgv"
#            -o "Aptitude::Debtags-Binary=/bin/true"
          )

  # Create the sources.list and then grab the Packages file
  # multiple entries in the sources.list are separated by #s
  echo "$SRC" | tr "#" "\n" > "$WD/etc/apt/sources.list"
  apt-get "${APTARGS[@]}" update

  updatekernel
  updatexorg

  # Clean up the downloads so far to reduce disk usage during multiple updates
  if $CLEANUP
  then
    rm -rf "$WD"
  fi
done

# record that the update ran (even if there were no changes made)
touch "$TARGET/versions"

# Clean up the tempdir before exit
cleanup

exit 0
